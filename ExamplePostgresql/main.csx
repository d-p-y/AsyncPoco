#!/usr/bin/env dotnet-script
#r "nuget: Npgsql, 5.0.3"
#r "nuget: AsyncPocoDpy, 2.0.2.1"

using AsyncPoco;

//POCO classes either written manually or generated by project similar to https://github.com/d-p-y/PocoSchemaCodeGeneration
[ExplicitColumns]
[TableName("something")]
[PrimaryKey("id")]
public class Something {
    [Column] public int id {get; set;}
    [Column] public int somenum {get; set;}
    [Column] public string sometext {get; set;}
}

var rawDbConn = new Npgsql.NpgsqlConnection("Host=localhost;Username=user;Password=pass;Database=dbname");
rawDbConn.Open();

var dbConn = new AsyncPoco.Database(rawDbConn);

dbConn.ShouldExpandSqlParametersToLists = false; //all that is needed to enable support in PostgreSQL

object myCollectionParameter = new [] {"first", "second"};
//use 'object' above to prevent wrong method overload resolution in AsyncPoco (variable params)

var rawRows = 
    await dbConn.FetchAsync<Something>(
        "select * FROM Something WHERE sometext = ANY(@0)", 
        myCollectionParameter
    );

var rows = rawRows.OrderBy(x => x.sometext).ToList();

Console.WriteLine($"Retrieved {rows.Count} rows having somenums: {String.Join(',', rows.Select(x => x.somenum))}");
