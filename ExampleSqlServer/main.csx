#!/usr/bin/env dotnet-script
#r "nuget: System.Data.SqlClient, 4.6.1"
#r "nuget: AsyncPocoDpy, 2.0.2.1"

using AsyncPoco;

//POCO classes either written manually or generated by project similar to https://github.com/d-p-y/PocoSchemaCodeGeneration
[ExplicitColumns]
[TableName("something")]
[PrimaryKey("id")]
public class Something {
    [Column] public int id {get; set;}
    [Column] public int somenum {get; set;}
    [Column] public string sometext {get; set;}
}

var rawDbConn = new System.Data.SqlClient.SqlConnection(@"Data Source=localhost\SQLEXPRESS;Initial Catalog=databasename;Integrated security=true");
rawDbConn.Open();

var dbConn = new AsyncPoco.Database(rawDbConn);

dbConn.ShouldExpandSqlParametersToLists = false; //in SQL Server we need to opt-in for feature...

//...and guide SQL Server which custom types to use
dbConn.PrepareParameterValue = (paramKind, paramValue) => {
    switch(paramKind) {
        case AsyncPoco.Database.ParameterKind.Collection:
            if (paramValue is string[] arrayOfString) {
                var dt = new System.Data.DataTable();
                dt.Columns.Add(new System.Data.DataColumn("V", typeof(string)));
                foreach (var x in arrayOfString) {
                    dt.Rows.Add(x);
                }

                return new System.Data.SqlClient.SqlParameter(){
                    //ParameterName is supplied later by AsyncPoco
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "ArrayOfString",
                    Value = dt
                };
            }
            //if you need more types (such as ArrayOfInt): create type in T-SQL and add support here
            throw new Exception($"unsupported collection type {paramValue.GetType().FullName}");

        default: return paramValue;
    }
};

object myCollectionParameter = new [] {"first", "second"};
//use 'object' above to prevent wrong method overload resolution in AsyncPoco (variable params)

var rawRows = 
    await dbConn.FetchAsync<Something>(
        "select * FROM Something WHERE sometext in (select V from @0)", 
        myCollectionParameter
    );

var rows = rawRows.OrderBy(x => x.sometext).ToList();

Console.WriteLine($"Retrieved {rows.Count} rows having somenums: {String.Join(',', rows.Select(x => x.somenum))}");
